
PWM_LED_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d5c  08003d5c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d5c  08003d5c  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d5c  08003d5c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d60  08003d60  00013d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000003c  08003da0  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003da0  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a983  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019dd  00000000  00000000  0002a9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002ce08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b424  00000000  00000000  0002d778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bffc  00000000  00000000  00048b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a50ff  00000000  00000000  00054b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9c97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a24  00000000  00000000  000f9cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d14 	.word	0x08003d14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08003d14 	.word	0x08003d14

080001c8 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
		HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80001d0:	2100      	movs	r1, #0
 80001d2:	4803      	ldr	r0, [pc, #12]	; (80001e0 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 80001d4:	f002 fcec 	bl	8002bb0 <HAL_TIM_PWM_Stop_DMA>

}
 80001d8:	bf00      	nop
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	2000009c 	.word	0x2000009c

080001e4 <send>:

void send()
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)Duty, 24);
 80001e8:	2318      	movs	r3, #24
 80001ea:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <send+0x14>)
 80001ec:	2100      	movs	r1, #0
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <send+0x18>)
 80001f0:	f002 fad2 	bl	8002798 <HAL_TIM_PWM_Start_DMA>
}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000000 	.word	0x20000000
 80001fc:	2000009c 	.word	0x2000009c

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f000 fa96 	bl	8000734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 f812 	bl	8000230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 f936 	bl	800047c <MX_GPIO_Init>
  MX_DMA_Init();
 8000210:	f000 f916 	bl	8000440 <MX_DMA_Init>
  MX_TIM1_Init();
 8000214:	f000 f868 	bl	80002e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, 15000, 1);
  send();
 8000218:	f7ff ffe4 	bl	80001e4 <send>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000222:	4802      	ldr	r0, [pc, #8]	; (800022c <main+0x2c>)
 8000224:	f000 ff68 	bl	80010f8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000228:	e7fe      	b.n	8000228 <main+0x28>
 800022a:	bf00      	nop
 800022c:	48001000 	.word	0x48001000

08000230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b09c      	sub	sp, #112	; 0x70
 8000234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000236:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800023a:	2228      	movs	r2, #40	; 0x28
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f003 fd60 	bl	8003d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000244:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
 800024c:	605a      	str	r2, [r3, #4]
 800024e:	609a      	str	r2, [r3, #8]
 8000250:	60da      	str	r2, [r3, #12]
 8000252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000254:	463b      	mov	r3, r7
 8000256:	2234      	movs	r2, #52	; 0x34
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 fd52 	bl	8003d04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000260:	2301      	movs	r3, #1
 8000262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000268:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026a:	2300      	movs	r3, #0
 800026c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026e:	2301      	movs	r3, #1
 8000270:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000272:	2302      	movs	r3, #2
 8000274:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000280:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000286:	4618      	mov	r0, r3
 8000288:	f000 ff4e 	bl	8001128 <HAL_RCC_OscConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000292:	f000 f933 	bl	80004fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000296:	230f      	movs	r3, #15
 8000298:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029a:	2302      	movs	r3, #2
 800029c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fe40 	bl	8001f38 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002be:	f000 f91d 	bl	80004fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80002c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002c6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002c8:	2300      	movs	r3, #0
 80002ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002cc:	463b      	mov	r3, r7
 80002ce:	4618      	mov	r0, r3
 80002d0:	f002 f818 	bl	8002304 <HAL_RCCEx_PeriphCLKConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002da:	f000 f90f 	bl	80004fc <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3770      	adds	r7, #112	; 0x70
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b09a      	sub	sp, #104	; 0x68
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]
 8000306:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000308:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
 8000318:	615a      	str	r2, [r3, #20]
 800031a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	222c      	movs	r2, #44	; 0x2c
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f003 fcee 	bl	8003d04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000328:	4b43      	ldr	r3, [pc, #268]	; (8000438 <MX_TIM1_Init+0x150>)
 800032a:	4a44      	ldr	r2, [pc, #272]	; (800043c <MX_TIM1_Init+0x154>)
 800032c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800032e:	4b42      	ldr	r3, [pc, #264]	; (8000438 <MX_TIM1_Init+0x150>)
 8000330:	2200      	movs	r2, #0
 8000332:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000334:	4b40      	ldr	r3, [pc, #256]	; (8000438 <MX_TIM1_Init+0x150>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 179;
 800033a:	4b3f      	ldr	r3, [pc, #252]	; (8000438 <MX_TIM1_Init+0x150>)
 800033c:	22b3      	movs	r2, #179	; 0xb3
 800033e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000340:	4b3d      	ldr	r3, [pc, #244]	; (8000438 <MX_TIM1_Init+0x150>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000346:	4b3c      	ldr	r3, [pc, #240]	; (8000438 <MX_TIM1_Init+0x150>)
 8000348:	2200      	movs	r2, #0
 800034a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034c:	4b3a      	ldr	r3, [pc, #232]	; (8000438 <MX_TIM1_Init+0x150>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000352:	4839      	ldr	r0, [pc, #228]	; (8000438 <MX_TIM1_Init+0x150>)
 8000354:	f002 f968 	bl	8002628 <HAL_TIM_Base_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800035e:	f000 f8cd 	bl	80004fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000366:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000368:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800036c:	4619      	mov	r1, r3
 800036e:	4832      	ldr	r0, [pc, #200]	; (8000438 <MX_TIM1_Init+0x150>)
 8000370:	f002 fe22 	bl	8002fb8 <HAL_TIM_ConfigClockSource>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800037a:	f000 f8bf 	bl	80004fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800037e:	482e      	ldr	r0, [pc, #184]	; (8000438 <MX_TIM1_Init+0x150>)
 8000380:	f002 f9a9 	bl	80026d6 <HAL_TIM_PWM_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800038a:	f000 f8b7 	bl	80004fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800038e:	2300      	movs	r3, #0
 8000390:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000392:	2300      	movs	r3, #0
 8000394:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000396:	2300      	movs	r3, #0
 8000398:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800039a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800039e:	4619      	mov	r1, r3
 80003a0:	4825      	ldr	r0, [pc, #148]	; (8000438 <MX_TIM1_Init+0x150>)
 80003a2:	f003 fb9f 	bl	8003ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80003ac:	f000 f8a6 	bl	80004fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003b0:	2360      	movs	r3, #96	; 0x60
 80003b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80003b4:	2300      	movs	r3, #0
 80003b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003b8:	2300      	movs	r3, #0
 80003ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003bc:	2300      	movs	r3, #0
 80003be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003c4:	2300      	movs	r3, #0
 80003c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003c8:	2300      	movs	r3, #0
 80003ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003d0:	2200      	movs	r2, #0
 80003d2:	4619      	mov	r1, r3
 80003d4:	4818      	ldr	r0, [pc, #96]	; (8000438 <MX_TIM1_Init+0x150>)
 80003d6:	f002 fcdb 	bl	8002d90 <HAL_TIM_PWM_ConfigChannel>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80003e0:	f000 f88c 	bl	80004fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80003fe:	2300      	movs	r3, #0
 8000400:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800040a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000410:	2300      	movs	r3, #0
 8000412:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	4619      	mov	r1, r3
 8000418:	4807      	ldr	r0, [pc, #28]	; (8000438 <MX_TIM1_Init+0x150>)
 800041a:	f003 fbd7 	bl	8003bcc <HAL_TIMEx_ConfigBreakDeadTime>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000424:	f000 f86a 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000428:	4803      	ldr	r0, [pc, #12]	; (8000438 <MX_TIM1_Init+0x150>)
 800042a:	f000 f8db 	bl	80005e4 <HAL_TIM_MspPostInit>

}
 800042e:	bf00      	nop
 8000430:	3768      	adds	r7, #104	; 0x68
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	2000009c 	.word	0x2000009c
 800043c:	40012c00 	.word	0x40012c00

08000440 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_DMA_Init+0x38>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <MX_DMA_Init+0x38>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_DMA_Init+0x38>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	2100      	movs	r1, #0
 8000462:	200c      	movs	r0, #12
 8000464:	f000 faa7 	bl	80009b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000468:	200c      	movs	r0, #12
 800046a:	f000 fac0 	bl	80009ee <HAL_NVIC_EnableIRQ>

}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000492:	4b18      	ldr	r3, [pc, #96]	; (80004f4 <MX_GPIO_Init+0x78>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a17      	ldr	r2, [pc, #92]	; (80004f4 <MX_GPIO_Init+0x78>)
 8000498:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <MX_GPIO_Init+0x78>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <MX_GPIO_Init+0x78>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a11      	ldr	r2, [pc, #68]	; (80004f4 <MX_GPIO_Init+0x78>)
 80004b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_GPIO_Init+0x78>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <MX_GPIO_Init+0x7c>)
 80004ca:	f000 fe15 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2300      	movs	r3, #0
 80004de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	4619      	mov	r1, r3
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <MX_GPIO_Init+0x7c>)
 80004e8:	f000 fc8c 	bl	8000e04 <HAL_GPIO_Init>

}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000
 80004f8:	48001000 	.word	0x48001000

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
}
 8000502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000504:	e7fe      	b.n	8000504 <Error_Handler+0x8>
	...

08000508 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050e:	4b0f      	ldr	r3, [pc, #60]	; (800054c <HAL_MspInit+0x44>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <HAL_MspInit+0x44>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_MspInit+0x44>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <HAL_MspInit+0x44>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	4a08      	ldr	r2, [pc, #32]	; (800054c <HAL_MspInit+0x44>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000530:	61d3      	str	r3, [r2, #28]
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_MspInit+0x44>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000

08000550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a1d      	ldr	r2, [pc, #116]	; (80005d4 <HAL_TIM_Base_MspInit+0x84>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d133      	bne.n	80005ca <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000562:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <HAL_TIM_Base_MspInit+0x88>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a1c      	ldr	r2, [pc, #112]	; (80005d8 <HAL_TIM_Base_MspInit+0x88>)
 8000568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <HAL_TIM_Base_MspInit+0x88>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <HAL_TIM_Base_MspInit+0x8c>)
 800057c:	4a18      	ldr	r2, [pc, #96]	; (80005e0 <HAL_TIM_Base_MspInit+0x90>)
 800057e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <HAL_TIM_Base_MspInit+0x8c>)
 8000582:	2210      	movs	r2, #16
 8000584:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <HAL_TIM_Base_MspInit+0x8c>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <HAL_TIM_Base_MspInit+0x8c>)
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_TIM_Base_MspInit+0x8c>)
 8000594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000598:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <HAL_TIM_Base_MspInit+0x8c>)
 800059c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005a0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <HAL_TIM_Base_MspInit+0x8c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <HAL_TIM_Base_MspInit+0x8c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80005ae:	480b      	ldr	r0, [pc, #44]	; (80005dc <HAL_TIM_Base_MspInit+0x8c>)
 80005b0:	f000 fa37 	bl	8000a22 <HAL_DMA_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80005ba:	f7ff ff9f 	bl	80004fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <HAL_TIM_Base_MspInit+0x8c>)
 80005c2:	625a      	str	r2, [r3, #36]	; 0x24
 80005c4:	4a05      	ldr	r2, [pc, #20]	; (80005dc <HAL_TIM_Base_MspInit+0x8c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40012c00 	.word	0x40012c00
 80005d8:	40021000 	.word	0x40021000
 80005dc:	20000058 	.word	0x20000058
 80005e0:	4002001c 	.word	0x4002001c

080005e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a11      	ldr	r2, [pc, #68]	; (8000648 <HAL_TIM_MspPostInit+0x64>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d11c      	bne.n	8000640 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_TIM_MspPostInit+0x68>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a10      	ldr	r2, [pc, #64]	; (800064c <HAL_TIM_MspPostInit+0x68>)
 800060c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_TIM_MspPostInit+0x68>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800061e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000622:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4619      	mov	r1, r3
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <HAL_TIM_MspPostInit+0x6c>)
 800063c:	f000 fbe2 	bl	8000e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40012c00 	.word	0x40012c00
 800064c:	40021000 	.word	0x40021000
 8000650:	48001000 	.word	0x48001000

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <NMI_Handler+0x4>

0800065a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <HardFault_Handler+0x4>

08000660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <MemManage_Handler+0x4>

08000666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <BusFault_Handler+0x4>

0800066c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <UsageFault_Handler+0x4>

08000672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a0:	f000 f88e 	bl	80007c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <DMA1_Channel2_IRQHandler+0x10>)
 80006ae:	f000 fa9c 	bl	8000bea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000058 	.word	0x20000058

080006bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <SystemInit+0x20>)
 80006c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006c6:	4a05      	ldr	r2, [pc, #20]	; (80006dc <SystemInit+0x20>)
 80006c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000718 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490e      	ldr	r1, [pc, #56]	; (8000720 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0b      	ldr	r4, [pc, #44]	; (800072c <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800070a:	f7ff ffd7 	bl	80006bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800070e:	f003 fad5 	bl	8003cbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000712:	f7ff fd75 	bl	8000200 <main>

08000716 <LoopForever>:

LoopForever:
    b LoopForever
 8000716:	e7fe      	b.n	8000716 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000718:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000720:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000724:	08003d64 	.word	0x08003d64
  ldr r2, =_sbss
 8000728:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 800072c:	200000ec 	.word	0x200000ec

08000730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000730:	e7fe      	b.n	8000730 <ADC1_2_IRQHandler>
	...

08000734 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <HAL_Init+0x28>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <HAL_Init+0x28>)
 800073e:	f043 0310 	orr.w	r3, r3, #16
 8000742:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000744:	2003      	movs	r0, #3
 8000746:	f000 f92b 	bl	80009a0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074a:	200f      	movs	r0, #15
 800074c:	f000 f808 	bl	8000760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000750:	f7ff feda 	bl	8000508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40022000 	.word	0x40022000

08000760 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <HAL_InitTick+0x54>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <HAL_InitTick+0x58>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	fbb3 f3f1 	udiv	r3, r3, r1
 800077a:	fbb2 f3f3 	udiv	r3, r2, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f943 	bl	8000a0a <HAL_SYSTICK_Config>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	e00e      	b.n	80007ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d80a      	bhi.n	80007aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000794:	2200      	movs	r2, #0
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800079c:	f000 f90b 	bl	80009b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_InitTick+0x5c>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007a6:	2300      	movs	r3, #0
 80007a8:	e000      	b.n	80007ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000030 	.word	0x20000030
 80007b8:	20000038 	.word	0x20000038
 80007bc:	20000034 	.word	0x20000034

080007c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_IncTick+0x20>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_IncTick+0x24>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_IncTick+0x24>)
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	20000038 	.word	0x20000038
 80007e4:	200000e8 	.word	0x200000e8

080007e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_GetTick+0x14>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	200000e8 	.word	0x200000e8

08000800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <__NVIC_SetPriorityGrouping+0x44>)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	60d3      	str	r3, [r2, #12]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800084c:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_GetPriorityGrouping+0x18>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	f003 0307 	and.w	r3, r3, #7
}
 8000856:	4618      	mov	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	2b00      	cmp	r3, #0
 8000874:	db0b      	blt.n	800088e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	f003 021f 	and.w	r2, r3, #31
 800087c:	4907      	ldr	r1, [pc, #28]	; (800089c <__NVIC_EnableIRQ+0x38>)
 800087e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000882:	095b      	lsrs	r3, r3, #5
 8000884:	2001      	movs	r0, #1
 8000886:	fa00 f202 	lsl.w	r2, r0, r2
 800088a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000e100 	.word	0xe000e100

080008a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	6039      	str	r1, [r7, #0]
 80008aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	db0a      	blt.n	80008ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	490c      	ldr	r1, [pc, #48]	; (80008ec <__NVIC_SetPriority+0x4c>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	0112      	lsls	r2, r2, #4
 80008c0:	b2d2      	uxtb	r2, r2
 80008c2:	440b      	add	r3, r1
 80008c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c8:	e00a      	b.n	80008e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4908      	ldr	r1, [pc, #32]	; (80008f0 <__NVIC_SetPriority+0x50>)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	f003 030f 	and.w	r3, r3, #15
 80008d6:	3b04      	subs	r3, #4
 80008d8:	0112      	lsls	r2, r2, #4
 80008da:	b2d2      	uxtb	r2, r2
 80008dc:	440b      	add	r3, r1
 80008de:	761a      	strb	r2, [r3, #24]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000e100 	.word	0xe000e100
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b089      	sub	sp, #36	; 0x24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f003 0307 	and.w	r3, r3, #7
 8000906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f1c3 0307 	rsb	r3, r3, #7
 800090e:	2b04      	cmp	r3, #4
 8000910:	bf28      	it	cs
 8000912:	2304      	movcs	r3, #4
 8000914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3304      	adds	r3, #4
 800091a:	2b06      	cmp	r3, #6
 800091c:	d902      	bls.n	8000924 <NVIC_EncodePriority+0x30>
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3b03      	subs	r3, #3
 8000922:	e000      	b.n	8000926 <NVIC_EncodePriority+0x32>
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800092c:	69bb      	ldr	r3, [r7, #24]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43da      	mvns	r2, r3
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	401a      	ands	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800093c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	43d9      	mvns	r1, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	4313      	orrs	r3, r2
         );
}
 800094e:	4618      	mov	r0, r3
 8000950:	3724      	adds	r7, #36	; 0x24
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800096c:	d301      	bcc.n	8000972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096e:	2301      	movs	r3, #1
 8000970:	e00f      	b.n	8000992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <SysTick_Config+0x40>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097a:	210f      	movs	r1, #15
 800097c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000980:	f7ff ff8e 	bl	80008a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <SysTick_Config+0x40>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <SysTick_Config+0x40>)
 800098c:	2207      	movs	r2, #7
 800098e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010

080009a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ff29 	bl	8000800 <__NVIC_SetPriorityGrouping>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c8:	f7ff ff3e 	bl	8000848 <__NVIC_GetPriorityGrouping>
 80009cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	6978      	ldr	r0, [r7, #20]
 80009d4:	f7ff ff8e 	bl	80008f4 <NVIC_EncodePriority>
 80009d8:	4602      	mov	r2, r0
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff5d 	bl	80008a0 <__NVIC_SetPriority>
}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff31 	bl	8000864 <__NVIC_EnableIRQ>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffa2 	bl	800095c <SysTick_Config>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b084      	sub	sp, #16
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d101      	bne.n	8000a38 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e037      	b.n	8000aa8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000a4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	69db      	ldr	r3, [r3, #28]
 8000a7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f97e 	bl	8000d8c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2200      	movs	r2, #0
 8000a94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
}  
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d101      	bne.n	8000ad0 <HAL_DMA_Start_IT+0x20>
 8000acc:	2302      	movs	r3, #2
 8000ace:	e04a      	b.n	8000b66 <HAL_DMA_Start_IT+0xb6>
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d13a      	bne.n	8000b58 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2200      	movs	r2, #0
 8000aee:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f022 0201 	bic.w	r2, r2, #1
 8000afe:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	68f8      	ldr	r0, [r7, #12]
 8000b08:	f000 f912 	bl	8000d30 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d008      	beq.n	8000b26 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f042 020e 	orr.w	r2, r2, #14
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	e00f      	b.n	8000b46 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f042 020a 	orr.w	r2, r2, #10
 8000b34:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f022 0204 	bic.w	r2, r2, #4
 8000b44:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f042 0201 	orr.w	r2, r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	e005      	b.n	8000b64 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000b60:	2302      	movs	r3, #2
 8000b62:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8000b64:	7dfb      	ldrb	r3, [r7, #23]
} 
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d005      	beq.n	8000b90 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2204      	movs	r2, #4
 8000b88:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	73fb      	strb	r3, [r7, #15]
 8000b8e:	e027      	b.n	8000be0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 020e 	bic.w	r2, r2, #14
 8000b9e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f022 0201 	bic.w	r2, r2, #1
 8000bae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb8:	2101      	movs	r1, #1
 8000bba:	fa01 f202 	lsl.w	r2, r1, r2
 8000bbe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	4798      	blx	r3
    } 
  }
  return status;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b084      	sub	sp, #16
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	2204      	movs	r2, #4
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d024      	beq.n	8000c5c <HAL_DMA_IRQHandler+0x72>
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d01f      	beq.n	8000c5c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0320 	and.w	r3, r3, #32
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d107      	bne.n	8000c3a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 0204 	bic.w	r2, r2, #4
 8000c38:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c42:	2104      	movs	r1, #4
 8000c44:	fa01 f202 	lsl.w	r2, r1, r2
 8000c48:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d06a      	beq.n	8000d28 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000c5a:	e065      	b.n	8000d28 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	2202      	movs	r2, #2
 8000c62:	409a      	lsls	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4013      	ands	r3, r2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d02c      	beq.n	8000cc6 <HAL_DMA_IRQHandler+0xdc>
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d027      	beq.n	8000cc6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0320 	and.w	r3, r3, #32
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d10b      	bne.n	8000c9c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 020a 	bic.w	r2, r2, #10
 8000c92:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2201      	movs	r2, #1
 8000c98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8000caa:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d035      	beq.n	8000d28 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000cc4:	e030      	b.n	8000d28 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	2208      	movs	r2, #8
 8000ccc:	409a      	lsls	r2, r3
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d028      	beq.n	8000d28 <HAL_DMA_IRQHandler+0x13e>
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d023      	beq.n	8000d28 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 020e 	bic.w	r2, r2, #14
 8000cee:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfe:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2201      	movs	r2, #1
 8000d04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d004      	beq.n	8000d28 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	4798      	blx	r3
    }
  }
}  
 8000d26:	e7ff      	b.n	8000d28 <HAL_DMA_IRQHandler+0x13e>
 8000d28:	bf00      	nop
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
 8000d3c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d46:	2101      	movs	r1, #1
 8000d48:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b10      	cmp	r3, #16
 8000d5c:	d108      	bne.n	8000d70 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d6e:	e007      	b.n	8000d80 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	60da      	str	r2, [r3, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <DMA_CalcBaseAndBitshift+0x60>)
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d80f      	bhi.n	8000dc0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <DMA_CalcBaseAndBitshift+0x64>)
 8000da8:	4413      	add	r3, r2
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <DMA_CalcBaseAndBitshift+0x68>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	009a      	lsls	r2, r3, #2
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <DMA_CalcBaseAndBitshift+0x6c>)
 8000dbc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000dbe:	e00e      	b.n	8000dde <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <DMA_CalcBaseAndBitshift+0x70>)
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <DMA_CalcBaseAndBitshift+0x68>)
 8000dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd0:	091b      	lsrs	r3, r3, #4
 8000dd2:	009a      	lsls	r2, r3, #2
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <DMA_CalcBaseAndBitshift+0x74>)
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40020407 	.word	0x40020407
 8000df0:	bffdfff8 	.word	0xbffdfff8
 8000df4:	cccccccd 	.word	0xcccccccd
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	bffdfbf8 	.word	0xbffdfbf8
 8000e00:	40020400 	.word	0x40020400

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b087      	sub	sp, #28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e12:	e154      	b.n	80010be <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 8146 	beq.w	80010b8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d005      	beq.n	8000e44 <HAL_GPIO_Init+0x40>
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d130      	bne.n	8000ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	f003 0201 	and.w	r2, r3, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 0303 	and.w	r3, r3, #3
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d017      	beq.n	8000ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d123      	bne.n	8000f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	691a      	ldr	r2, [r3, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	6939      	ldr	r1, [r7, #16]
 8000f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0203 	and.w	r2, r3, #3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 80a0 	beq.w	80010b8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f78:	4b58      	ldr	r3, [pc, #352]	; (80010dc <HAL_GPIO_Init+0x2d8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	4a57      	ldr	r2, [pc, #348]	; (80010dc <HAL_GPIO_Init+0x2d8>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6193      	str	r3, [r2, #24]
 8000f84:	4b55      	ldr	r3, [pc, #340]	; (80010dc <HAL_GPIO_Init+0x2d8>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f90:	4a53      	ldr	r2, [pc, #332]	; (80010e0 <HAL_GPIO_Init+0x2dc>)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fba:	d019      	beq.n	8000ff0 <HAL_GPIO_Init+0x1ec>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a49      	ldr	r2, [pc, #292]	; (80010e4 <HAL_GPIO_Init+0x2e0>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d013      	beq.n	8000fec <HAL_GPIO_Init+0x1e8>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a48      	ldr	r2, [pc, #288]	; (80010e8 <HAL_GPIO_Init+0x2e4>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d00d      	beq.n	8000fe8 <HAL_GPIO_Init+0x1e4>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a47      	ldr	r2, [pc, #284]	; (80010ec <HAL_GPIO_Init+0x2e8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d007      	beq.n	8000fe4 <HAL_GPIO_Init+0x1e0>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a46      	ldr	r2, [pc, #280]	; (80010f0 <HAL_GPIO_Init+0x2ec>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d101      	bne.n	8000fe0 <HAL_GPIO_Init+0x1dc>
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e008      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fe0:	2305      	movs	r3, #5
 8000fe2:	e006      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e004      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e002      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <HAL_GPIO_Init+0x1ee>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	f002 0203 	and.w	r2, r2, #3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001002:	4937      	ldr	r1, [pc, #220]	; (80010e0 <HAL_GPIO_Init+0x2dc>)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001010:	4b38      	ldr	r3, [pc, #224]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001034:	4a2f      	ldr	r2, [pc, #188]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800103a:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800105e:	4a25      	ldr	r2, [pc, #148]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001088:	4a1a      	ldr	r2, [pc, #104]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010b2:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <HAL_GPIO_Init+0x2f0>)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3301      	adds	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f47f aea3 	bne.w	8000e14 <HAL_GPIO_Init+0x10>
  }
}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010000 	.word	0x40010000
 80010e4:	48000400 	.word	0x48000400
 80010e8:	48000800 	.word	0x48000800
 80010ec:	48000c00 	.word	0x48000c00
 80010f0:	48001000 	.word	0x48001000
 80010f4:	40010400 	.word	0x40010400

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001114:	e002      	b.n	800111c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800112e:	af00      	add	r7, sp, #0
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	f000 bef4 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 816a 	beq.w	8001426 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001152:	4bb3      	ldr	r3, [pc, #716]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b04      	cmp	r3, #4
 800115c:	d00c      	beq.n	8001178 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800115e:	4bb0      	ldr	r3, [pc, #704]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	2b08      	cmp	r3, #8
 8001168:	d159      	bne.n	800121e <HAL_RCC_OscConfig+0xf6>
 800116a:	4bad      	ldr	r3, [pc, #692]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001176:	d152      	bne.n	800121e <HAL_RCC_OscConfig+0xf6>
 8001178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001180:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001184:	fa93 f3a3 	rbit	r3, r3
 8001188:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800118c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d102      	bne.n	80011aa <HAL_RCC_OscConfig+0x82>
 80011a4:	4b9e      	ldr	r3, [pc, #632]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	e015      	b.n	80011d6 <HAL_RCC_OscConfig+0xae>
 80011aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011c2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80011c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80011ca:	fa93 f3a3 	rbit	r3, r3
 80011ce:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80011d2:	4b93      	ldr	r3, [pc, #588]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011da:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80011de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80011e2:	fa92 f2a2 	rbit	r2, r2
 80011e6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80011ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80011ee:	fab2 f282 	clz	r2, r2
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	f042 0220 	orr.w	r2, r2, #32
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	f002 021f 	and.w	r2, r2, #31
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	4013      	ands	r3, r2
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 810c 	beq.w	8001424 <HAL_RCC_OscConfig+0x2fc>
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f040 8106 	bne.w	8001424 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	f000 be86 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001228:	d106      	bne.n	8001238 <HAL_RCC_OscConfig+0x110>
 800122a:	4b7d      	ldr	r3, [pc, #500]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a7c      	ldr	r2, [pc, #496]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e030      	b.n	800129a <HAL_RCC_OscConfig+0x172>
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0x134>
 8001242:	4b77      	ldr	r3, [pc, #476]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a76      	ldr	r2, [pc, #472]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b74      	ldr	r3, [pc, #464]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a73      	ldr	r2, [pc, #460]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e01e      	b.n	800129a <HAL_RCC_OscConfig+0x172>
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001266:	d10c      	bne.n	8001282 <HAL_RCC_OscConfig+0x15a>
 8001268:	4b6d      	ldr	r3, [pc, #436]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a6c      	ldr	r2, [pc, #432]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800126e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a69      	ldr	r2, [pc, #420]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800127a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e00b      	b.n	800129a <HAL_RCC_OscConfig+0x172>
 8001282:	4b67      	ldr	r3, [pc, #412]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a66      	ldr	r2, [pc, #408]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b64      	ldr	r3, [pc, #400]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a63      	ldr	r2, [pc, #396]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001298:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800129a:	4b61      	ldr	r3, [pc, #388]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 800129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129e:	f023 020f 	bic.w	r2, r3, #15
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	495d      	ldr	r1, [pc, #372]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80012aa:	4313      	orrs	r3, r2
 80012ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d059      	beq.n	800136c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fa96 	bl	80007e8 <HAL_GetTick>
 80012bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c0:	e00a      	b.n	80012d8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c2:	f7ff fa91 	bl	80007e8 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d902      	bls.n	80012d8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	f000 be29 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
 80012d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80012ec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f0:	fab3 f383 	clz	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d102      	bne.n	800130a <HAL_RCC_OscConfig+0x1e2>
 8001304:	4b46      	ldr	r3, [pc, #280]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x20e>
 800130a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800130e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800131e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001322:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001326:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800132a:	fa93 f3a3 	rbit	r3, r3
 800132e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001332:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800133a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800133e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001342:	fa92 f2a2 	rbit	r2, r2
 8001346:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800134a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800134e:	fab2 f282 	clz	r2, r2
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	f042 0220 	orr.w	r2, r2, #32
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	f002 021f 	and.w	r2, r2, #31
 800135e:	2101      	movs	r1, #1
 8001360:	fa01 f202 	lsl.w	r2, r1, r2
 8001364:	4013      	ands	r3, r2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0ab      	beq.n	80012c2 <HAL_RCC_OscConfig+0x19a>
 800136a:	e05c      	b.n	8001426 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fa3c 	bl	80007e8 <HAL_GetTick>
 8001370:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001376:	f7ff fa37 	bl	80007e8 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d902      	bls.n	800138c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	f000 bdcf 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
 800138c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001390:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80013a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d102      	bne.n	80013be <HAL_RCC_OscConfig+0x296>
 80013b8:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_OscConfig+0x2c2>
 80013be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80013ca:	fa93 f3a3 	rbit	r3, r3
 80013ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80013d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80013da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80013de:	fa93 f3a3 	rbit	r3, r3
 80013e2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_RCC_OscConfig+0x2f8>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80013f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013f6:	fa92 f2a2 	rbit	r2, r2
 80013fa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80013fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001402:	fab2 f282 	clz	r2, r2
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	f042 0220 	orr.w	r2, r2, #32
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	f002 021f 	and.w	r2, r2, #31
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	4013      	ands	r3, r2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1ab      	bne.n	8001376 <HAL_RCC_OscConfig+0x24e>
 800141e:	e002      	b.n	8001426 <HAL_RCC_OscConfig+0x2fe>
 8001420:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 816f 	beq.w	8001714 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001436:	4bd0      	ldr	r3, [pc, #832]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001442:	4bcd      	ldr	r3, [pc, #820]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	2b08      	cmp	r3, #8
 800144c:	d16c      	bne.n	8001528 <HAL_RCC_OscConfig+0x400>
 800144e:	4bca      	ldr	r3, [pc, #808]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d166      	bne.n	8001528 <HAL_RCC_OscConfig+0x400>
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001460:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800146c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d102      	bne.n	800148a <HAL_RCC_OscConfig+0x362>
 8001484:	4bbc      	ldr	r3, [pc, #752]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	e013      	b.n	80014b2 <HAL_RCC_OscConfig+0x38a>
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001494:	fa93 f3a3 	rbit	r3, r3
 8001498:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800149c:	2302      	movs	r3, #2
 800149e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80014ae:	4bb2      	ldr	r3, [pc, #712]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	2202      	movs	r2, #2
 80014b4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80014b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014bc:	fa92 f2a2 	rbit	r2, r2
 80014c0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80014c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80014c8:	fab2 f282 	clz	r2, r2
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	f042 0220 	orr.w	r2, r2, #32
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	f002 021f 	and.w	r2, r2, #31
 80014d8:	2101      	movs	r1, #1
 80014da:	fa01 f202 	lsl.w	r2, r1, r2
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d007      	beq.n	80014f4 <HAL_RCC_OscConfig+0x3cc>
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d002      	beq.n	80014f4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	f000 bd1b 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4ba0      	ldr	r3, [pc, #640]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	21f8      	movs	r1, #248	; 0xf8
 8001504:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800150c:	fa91 f1a1 	rbit	r1, r1
 8001510:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001514:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001518:	fab1 f181 	clz	r1, r1
 800151c:	b2c9      	uxtb	r1, r1
 800151e:	408b      	lsls	r3, r1
 8001520:	4995      	ldr	r1, [pc, #596]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	e0f5      	b.n	8001714 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 8085 	beq.w	800163e <HAL_RCC_OscConfig+0x516>
 8001534:	2301      	movs	r3, #1
 8001536:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800153e:	fa93 f3a3 	rbit	r3, r3
 8001542:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001546:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800154a:	fab3 f383 	clz	r3, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001554:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	461a      	mov	r2, r3
 800155c:	2301      	movs	r3, #1
 800155e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff f942 	bl	80007e8 <HAL_GetTick>
 8001564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff f93d 	bl	80007e8 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d902      	bls.n	8001580 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	f000 bcd5 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001580:	2302      	movs	r3, #2
 8001582:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800158a:	fa93 f3a3 	rbit	r3, r3
 800158e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001592:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	fab3 f383 	clz	r3, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	095b      	lsrs	r3, r3, #5
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d102      	bne.n	80015b0 <HAL_RCC_OscConfig+0x488>
 80015aa:	4b73      	ldr	r3, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	e013      	b.n	80015d8 <HAL_RCC_OscConfig+0x4b0>
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015c2:	2302      	movs	r3, #2
 80015c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80015c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80015cc:	fa93 f3a3 	rbit	r3, r3
 80015d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	2202      	movs	r2, #2
 80015da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80015de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015e2:	fa92 f2a2 	rbit	r2, r2
 80015e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80015ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80015ee:	fab2 f282 	clz	r2, r2
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	f042 0220 	orr.w	r2, r2, #32
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	f002 021f 	and.w	r2, r2, #31
 80015fe:	2101      	movs	r1, #1
 8001600:	fa01 f202 	lsl.w	r2, r1, r2
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0af      	beq.n	800156a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4b5b      	ldr	r3, [pc, #364]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	21f8      	movs	r1, #248	; 0xf8
 800161a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001622:	fa91 f1a1 	rbit	r1, r1
 8001626:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800162a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800162e:	fab1 f181 	clz	r1, r1
 8001632:	b2c9      	uxtb	r1, r1
 8001634:	408b      	lsls	r3, r1
 8001636:	4950      	ldr	r1, [pc, #320]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]
 800163c:	e06a      	b.n	8001714 <HAL_RCC_OscConfig+0x5ec>
 800163e:	2301      	movs	r3, #1
 8001640:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001648:	fa93 f3a3 	rbit	r3, r3
 800164c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001650:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800165e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	461a      	mov	r2, r3
 8001666:	2300      	movs	r3, #0
 8001668:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff f8bd 	bl	80007e8 <HAL_GetTick>
 800166e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff f8b8 	bl	80007e8 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d902      	bls.n	800168a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	f000 bc50 	b.w	8001f2a <HAL_RCC_OscConfig+0xe02>
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800169c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a0:	fab3 f383 	clz	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d102      	bne.n	80016ba <HAL_RCC_OscConfig+0x592>
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	e013      	b.n	80016e2 <HAL_RCC_OscConfig+0x5ba>
 80016ba:	2302      	movs	r3, #2
 80016bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80016de:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_RCC_OscConfig+0x650>)
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	2202      	movs	r2, #2
 80016e4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80016e8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016ec:	fa92 f2a2 	rbit	r2, r2
 80016f0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80016f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016f8:	fab2 f282 	clz	r2, r2
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	f042 0220 	orr.w	r2, r2, #32
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	f002 021f 	and.w	r2, r2, #31
 8001708:	2101      	movs	r1, #1
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	4013      	ands	r3, r2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1af      	bne.n	8001674 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001714:	1d3b      	adds	r3, r7, #4
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80da 	beq.w	80018d8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d069      	beq.n	8001802 <HAL_RCC_OscConfig+0x6da>
 800172e:	2301      	movs	r3, #1
 8001730:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001738:	fa93 f3a3 	rbit	r3, r3
 800173c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001744:	fab3 f383 	clz	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	461a      	mov	r2, r3
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_RCC_OscConfig+0x654>)
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	461a      	mov	r2, r3
 8001754:	2301      	movs	r3, #1
 8001756:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001758:	f7ff f846 	bl	80007e8 <HAL_GetTick>
 800175c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001760:	e00e      	b.n	8001780 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001762:	f7ff f841 	bl	80007e8 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d906      	bls.n	8001780 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e3d9      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000
 800177c:	10908120 	.word	0x10908120
 8001780:	2302      	movs	r3, #2
 8001782:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001792:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001796:	2202      	movs	r2, #2
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	fa93 f2a3 	rbit	r2, r3
 80017a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017ae:	2202      	movs	r2, #2
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	4ba5      	ldr	r3, [pc, #660]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80017c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017ca:	2102      	movs	r1, #2
 80017cc:	6019      	str	r1, [r3, #0]
 80017ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	fa93 f1a3 	rbit	r1, r3
 80017d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017dc:	6019      	str	r1, [r3, #0]
  return result;
 80017de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	fab3 f383 	clz	r3, r3
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	2101      	movs	r1, #1
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0b0      	beq.n	8001762 <HAL_RCC_OscConfig+0x63a>
 8001800:	e06a      	b.n	80018d8 <HAL_RCC_OscConfig+0x7b0>
 8001802:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f2a3 	rbit	r2, r3
 8001814:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001818:	601a      	str	r2, [r3, #0]
  return result;
 800181a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800181e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	461a      	mov	r2, r3
 8001828:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0x934>)
 800182a:	4413      	add	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	461a      	mov	r2, r3
 8001830:	2300      	movs	r3, #0
 8001832:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001834:	f7fe ffd8 	bl	80007e8 <HAL_GetTick>
 8001838:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	e009      	b.n	8001852 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183e:	f7fe ffd3 	bl	80007e8 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e36b      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001852:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001856:	2202      	movs	r2, #2
 8001858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	fa93 f2a3 	rbit	r2, r3
 8001864:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	fa93 f2a3 	rbit	r2, r3
 800187c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001886:	2202      	movs	r2, #2
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	fa93 f2a3 	rbit	r2, r3
 8001894:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001898:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189a:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 800189c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018a2:	2102      	movs	r1, #2
 80018a4:	6019      	str	r1, [r3, #0]
 80018a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f1a3 	rbit	r1, r3
 80018b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018b4:	6019      	str	r1, [r3, #0]
  return result;
 80018b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2101      	movs	r1, #1
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1b2      	bne.n	800183e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8158 	beq.w	8001b98 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ee:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d112      	bne.n	8001920 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b57      	ldr	r3, [pc, #348]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a56      	ldr	r2, [pc, #344]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]
 8001906:	4b54      	ldr	r3, [pc, #336]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	4b4f      	ldr	r3, [pc, #316]	; (8001a60 <HAL_RCC_OscConfig+0x938>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d11a      	bne.n	8001962 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800192c:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <HAL_RCC_OscConfig+0x938>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a4b      	ldr	r2, [pc, #300]	; (8001a60 <HAL_RCC_OscConfig+0x938>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001936:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001938:	f7fe ff56 	bl	80007e8 <HAL_GetTick>
 800193c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001940:	e009      	b.n	8001956 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001942:	f7fe ff51 	bl	80007e8 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	; 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e2e9      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <HAL_RCC_OscConfig+0x938>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0ef      	beq.n	8001942 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d106      	bne.n	800197a <HAL_RCC_OscConfig+0x852>
 800196c:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4a39      	ldr	r2, [pc, #228]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6213      	str	r3, [r2, #32]
 8001978:	e02f      	b.n	80019da <HAL_RCC_OscConfig+0x8b2>
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10c      	bne.n	800199e <HAL_RCC_OscConfig+0x876>
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a33      	ldr	r2, [pc, #204]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6213      	str	r3, [r2, #32]
 8001990:	4b31      	ldr	r3, [pc, #196]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4a30      	ldr	r2, [pc, #192]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001996:	f023 0304 	bic.w	r3, r3, #4
 800199a:	6213      	str	r3, [r2, #32]
 800199c:	e01d      	b.n	80019da <HAL_RCC_OscConfig+0x8b2>
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d10c      	bne.n	80019c2 <HAL_RCC_OscConfig+0x89a>
 80019a8:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4a2a      	ldr	r2, [pc, #168]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019ae:	f043 0304 	orr.w	r3, r3, #4
 80019b2:	6213      	str	r3, [r2, #32]
 80019b4:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a27      	ldr	r2, [pc, #156]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	6213      	str	r3, [r2, #32]
 80019c0:	e00b      	b.n	80019da <HAL_RCC_OscConfig+0x8b2>
 80019c2:	4b25      	ldr	r3, [pc, #148]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4a24      	ldr	r2, [pc, #144]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6213      	str	r3, [r2, #32]
 80019ce:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d06b      	beq.n	8001abc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e4:	f7fe ff00 	bl	80007e8 <HAL_GetTick>
 80019e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ec:	e00b      	b.n	8001a06 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7fe fefb 	bl	80007e8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e291      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001a06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a22:	2202      	movs	r2, #2
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a34:	601a      	str	r2, [r3, #0]
  return result;
 8001a36:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a3a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d109      	bne.n	8001a64 <HAL_RCC_OscConfig+0x93c>
 8001a50:	4b01      	ldr	r3, [pc, #4]	; (8001a58 <HAL_RCC_OscConfig+0x930>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	e014      	b.n	8001a80 <HAL_RCC_OscConfig+0x958>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	10908120 	.word	0x10908120
 8001a60:	40007000 	.word	0x40007000
 8001a64:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a68:	2202      	movs	r2, #2
 8001a6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	4bbb      	ldr	r3, [pc, #748]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a84:	2102      	movs	r1, #2
 8001a86:	6011      	str	r1, [r2, #0]
 8001a88:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	fa92 f1a2 	rbit	r1, r2
 8001a92:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a96:	6011      	str	r1, [r2, #0]
  return result;
 8001a98:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	fab2 f282 	clz	r2, r2
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	f002 021f 	and.w	r2, r2, #31
 8001aae:	2101      	movs	r1, #1
 8001ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d099      	beq.n	80019ee <HAL_RCC_OscConfig+0x8c6>
 8001aba:	e063      	b.n	8001b84 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7fe fe94 	bl	80007e8 <HAL_GetTick>
 8001ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac4:	e00b      	b.n	8001ade <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac6:	f7fe fe8f 	bl	80007e8 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e225      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001ade:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001afa:	2202      	movs	r2, #2
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	fa93 f2a3 	rbit	r2, r3
 8001b08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b0c:	601a      	str	r2, [r3, #0]
  return result;
 8001b0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b14:	fab3 f383 	clz	r3, r3
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_OscConfig+0xa06>
 8001b28:	4b90      	ldr	r3, [pc, #576]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	e00d      	b.n	8001b4a <HAL_RCC_OscConfig+0xa22>
 8001b2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b32:	2202      	movs	r2, #2
 8001b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b4e:	2102      	movs	r1, #2
 8001b50:	6011      	str	r1, [r2, #0]
 8001b52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	fa92 f1a2 	rbit	r1, r2
 8001b5c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b60:	6011      	str	r1, [r2, #0]
  return result;
 8001b62:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	fab2 f282 	clz	r2, r2
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f002 021f 	and.w	r2, r2, #31
 8001b78:	2101      	movs	r1, #1
 8001b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1a0      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8c:	4b77      	ldr	r3, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	4a76      	ldr	r2, [pc, #472]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 81c2 	beq.w	8001f28 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ba4:	4b71      	ldr	r3, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	f000 819c 	beq.w	8001eea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	f040 8114 	bne.w	8001de6 <HAL_RCC_OscConfig+0xcbe>
 8001bbe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f2a3 	rbit	r2, r3
 8001bd2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bd6:	601a      	str	r2, [r3, #0]
  return result;
 8001bd8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bdc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7fe fdf8 	bl	80007e8 <HAL_GetTick>
 8001bf8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfc:	e009      	b.n	8001c12 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7fe fdf3 	bl	80007e8 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e18b      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001c12:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	fa93 f2a3 	rbit	r2, r3
 8001c26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c2a:	601a      	str	r2, [r3, #0]
  return result;
 8001c2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0xb24>
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e01b      	b.n	8001c84 <HAL_RCC_OscConfig+0xb5c>
 8001c4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	fa93 f2a3 	rbit	r2, r3
 8001c60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	fa93 f2a3 	rbit	r2, r3
 8001c7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c8c:	6011      	str	r1, [r2, #0]
 8001c8e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	fa92 f1a2 	rbit	r1, r2
 8001c98:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c9c:	6011      	str	r1, [r2, #0]
  return result;
 8001c9e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	fab2 f282 	clz	r2, r2
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	f042 0220 	orr.w	r2, r2, #32
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f002 021f 	and.w	r2, r2, #31
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d19e      	bne.n	8001bfe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	4925      	ldr	r1, [pc, #148]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
 8001cdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ce0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	fa93 f2a3 	rbit	r2, r3
 8001cf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cf4:	601a      	str	r2, [r3, #0]
  return result;
 8001cf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cfa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2301      	movs	r3, #1
 8001d10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7fe fd69 	bl	80007e8 <HAL_GetTick>
 8001d16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1a:	e009      	b.n	8001d30 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7fe fd64 	bl	80007e8 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e0fc      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001d30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fa93 f2a3 	rbit	r2, r3
 8001d44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d48:	601a      	str	r2, [r3, #0]
  return result;
 8001d4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d50:	fab3 f383 	clz	r3, r3
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	095b      	lsrs	r3, r3, #5
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0xc48>
 8001d64:	4b01      	ldr	r3, [pc, #4]	; (8001d6c <HAL_RCC_OscConfig+0xc44>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	e01e      	b.n	8001da8 <HAL_RCC_OscConfig+0xc80>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	fa93 f2a3 	rbit	r2, r3
 8001d84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	fa93 f2a3 	rbit	r2, r3
 8001d9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_OscConfig+0xe0c>)
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001db0:	6011      	str	r1, [r2, #0]
 8001db2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	fa92 f1a2 	rbit	r1, r2
 8001dbc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001dc0:	6011      	str	r1, [r2, #0]
  return result;
 8001dc2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	fab2 f282 	clz	r2, r2
 8001dcc:	b2d2      	uxtb	r2, r2
 8001dce:	f042 0220 	orr.w	r2, r2, #32
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	f002 021f 	and.w	r2, r2, #31
 8001dd8:	2101      	movs	r1, #1
 8001dda:	fa01 f202 	lsl.w	r2, r1, r2
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d09b      	beq.n	8001d1c <HAL_RCC_OscConfig+0xbf4>
 8001de4:	e0a0      	b.n	8001f28 <HAL_RCC_OscConfig+0xe00>
 8001de6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	fa93 f2a3 	rbit	r2, r3
 8001dfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dfe:	601a      	str	r2, [r3, #0]
  return result;
 8001e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	461a      	mov	r2, r3
 8001e18:	2300      	movs	r3, #0
 8001e1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7fe fce4 	bl	80007e8 <HAL_GetTick>
 8001e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e26:	f7fe fcdf 	bl	80007e8 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e077      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
 8001e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fa93 f2a3 	rbit	r2, r3
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	601a      	str	r2, [r3, #0]
  return result;
 8001e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5a:	fab3 f383 	clz	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d102      	bne.n	8001e74 <HAL_RCC_OscConfig+0xd4c>
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_OscConfig+0xe0c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	e01b      	b.n	8001eac <HAL_RCC_OscConfig+0xd84>
 8001e74:	f107 0320 	add.w	r3, r7, #32
 8001e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	fa93 f2a3 	rbit	r2, r3
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	f107 0318 	add.w	r3, r7, #24
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_RCC_OscConfig+0xe0c>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	f107 0210 	add.w	r2, r7, #16
 8001eb0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eb4:	6011      	str	r1, [r2, #0]
 8001eb6:	f107 0210 	add.w	r2, r7, #16
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	fa92 f1a2 	rbit	r1, r2
 8001ec0:	f107 020c 	add.w	r2, r7, #12
 8001ec4:	6011      	str	r1, [r2, #0]
  return result;
 8001ec6:	f107 020c 	add.w	r2, r7, #12
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	fab2 f282 	clz	r2, r2
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f042 0220 	orr.w	r2, r2, #32
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	f002 021f 	and.w	r2, r2, #31
 8001edc:	2101      	movs	r1, #1
 8001ede:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d19e      	bne.n	8001e26 <HAL_RCC_OscConfig+0xcfe>
 8001ee8:	e01e      	b.n	8001f28 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e018      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef8:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <HAL_RCC_OscConfig+0xe0c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d108      	bne.n	8001f24 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40021000 	.word	0x40021000

08001f38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b09e      	sub	sp, #120	; 0x78
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e162      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f50:	4b90      	ldr	r3, [pc, #576]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d910      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	4b8d      	ldr	r3, [pc, #564]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 0207 	bic.w	r2, r3, #7
 8001f66:	498b      	ldr	r1, [pc, #556]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b89      	ldr	r3, [pc, #548]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e14a      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f8c:	4b82      	ldr	r3, [pc, #520]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	497f      	ldr	r1, [pc, #508]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80dc 	beq.w	8002164 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d13c      	bne.n	800202e <HAL_RCC_ClockConfig+0xf6>
 8001fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fbc:	fa93 f3a3 	rbit	r3, r3
 8001fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_ClockConfig+0xa6>
 8001fd8:	4b6f      	ldr	r3, [pc, #444]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	e00f      	b.n	8001ffe <HAL_RCC_ClockConfig+0xc6>
 8001fde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fe2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	667b      	str	r3, [r7, #100]	; 0x64
 8001fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002002:	65ba      	str	r2, [r7, #88]	; 0x58
 8002004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002006:	fa92 f2a2 	rbit	r2, r2
 800200a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800200c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f002 021f 	and.w	r2, r2, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d17b      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0f3      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d13c      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x178>
 8002036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800203a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	b2db      	uxtb	r3, r3
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d102      	bne.n	8002060 <HAL_RCC_ClockConfig+0x128>
 800205a:	4b4f      	ldr	r3, [pc, #316]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	e00f      	b.n	8002080 <HAL_RCC_ClockConfig+0x148>
 8002060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002064:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
 800206e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
 8002074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207c:	4b46      	ldr	r3, [pc, #280]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002084:	63ba      	str	r2, [r7, #56]	; 0x38
 8002086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800208e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002090:	fab2 f282 	clz	r2, r2
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	f042 0220 	orr.w	r2, r2, #32
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	f002 021f 	and.w	r2, r2, #31
 80020a0:	2101      	movs	r1, #1
 80020a2:	fa01 f202 	lsl.w	r2, r1, r2
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d13a      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0b2      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
 80020b0:	2302      	movs	r3, #2
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	fa93 f3a3 	rbit	r3, r3
 80020ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x1a0>
 80020d2:	4b31      	ldr	r3, [pc, #196]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e00d      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1bc>
 80020d8:	2302      	movs	r3, #2
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
 80020e4:	2302      	movs	r3, #2
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2202      	movs	r2, #2
 80020f6:	61ba      	str	r2, [r7, #24]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	fa92 f2a2 	rbit	r2, r2
 80020fe:	617a      	str	r2, [r7, #20]
  return result;
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f042 0220 	orr.w	r2, r2, #32
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f002 021f 	and.w	r2, r2, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e079      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	491a      	ldr	r1, [pc, #104]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7fe fb58 	bl	80007e8 <HAL_GetTick>
 8002138:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7fe fb54 	bl	80007e8 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e061      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_RCC_ClockConfig+0x260>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d214      	bcs.n	800219c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4906      	ldr	r1, [pc, #24]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_RCC_ClockConfig+0x25c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e040      	b.n	8002216 <HAL_RCC_ClockConfig+0x2de>
 8002194:	40022000 	.word	0x40022000
 8002198:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	491a      	ldr	r1, [pc, #104]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c6:	4b16      	ldr	r3, [pc, #88]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4912      	ldr	r1, [pc, #72]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021da:	f000 f829 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021de:	4601      	mov	r1, r0
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_RCC_ClockConfig+0x2e8>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e8:	22f0      	movs	r2, #240	; 0xf0
 80021ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	fa92 f2a2 	rbit	r2, r2
 80021f2:	60fa      	str	r2, [r7, #12]
  return result;
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	fab2 f282 	clz	r2, r2
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	40d3      	lsrs	r3, r2
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x2ec>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	fa21 f303 	lsr.w	r3, r1, r3
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_RCC_ClockConfig+0x2f0>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_RCC_ClockConfig+0x2f4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe faa6 	bl	8000760 <HAL_InitTick>
  
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3778      	adds	r7, #120	; 0x78
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	08003d2c 	.word	0x08003d2c
 8002228:	20000030 	.word	0x20000030
 800222c:	20000034 	.word	0x20000034

08002230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b08b      	sub	sp, #44	; 0x2c
 8002234:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
 8002242:	2300      	movs	r3, #0
 8002244:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800224a:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x30>
 800225a:	2b08      	cmp	r3, #8
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x36>
 800225e:	e03c      	b.n	80022da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002262:	623b      	str	r3, [r7, #32]
      break;
 8002264:	e03c      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800226c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002270:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	607a      	str	r2, [r7, #4]
  return result;
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	fab2 f282 	clz	r2, r2
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	40d3      	lsrs	r3, r2
 8002284:	4a1c      	ldr	r2, [pc, #112]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	220f      	movs	r2, #15
 8002294:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	fa92 f2a2 	rbit	r2, r2
 800229c:	60fa      	str	r2, [r7, #12]
  return result;
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	fab2 f282 	clz	r2, r2
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	40d3      	lsrs	r3, r2
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80022aa:	5cd3      	ldrb	r3, [r2, r3]
 80022ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
 80022c8:	e004      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	4a0c      	ldr	r2, [pc, #48]	; (8002300 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	623b      	str	r3, [r7, #32]
      break;
 80022d8:	e002      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022dc:	623b      	str	r3, [r7, #32]
      break;
 80022de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e0:	6a3b      	ldr	r3, [r7, #32]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	372c      	adds	r7, #44	; 0x2c
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	007a1200 	.word	0x007a1200
 80022f8:	08003d3c 	.word	0x08003d3c
 80022fc:	08003d4c 	.word	0x08003d4c
 8002300:	003d0900 	.word	0x003d0900

08002304 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b092      	sub	sp, #72	; 0x48
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002310:	2300      	movs	r3, #0
 8002312:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002314:	2300      	movs	r3, #0
 8002316:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80d4 	beq.w	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002328:	4b4e      	ldr	r3, [pc, #312]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10e      	bne.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002334:	4b4b      	ldr	r3, [pc, #300]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	4a4a      	ldr	r2, [pc, #296]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233e:	61d3      	str	r3, [r2, #28]
 8002340:	4b48      	ldr	r3, [pc, #288]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002352:	4b45      	ldr	r3, [pc, #276]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235e:	4b42      	ldr	r3, [pc, #264]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a41      	ldr	r2, [pc, #260]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7fe fa3d 	bl	80007e8 <HAL_GetTick>
 800236e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	e008      	b.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002372:	f7fe fa39 	bl	80007e8 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b64      	cmp	r3, #100	; 0x64
 800237e:	d901      	bls.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e14b      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002390:	4b34      	ldr	r3, [pc, #208]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002398:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800239a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 8084 	beq.w	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d07c      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023b0:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	461a      	mov	r2, r3
 80023da:	2301      	movs	r3, #1
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e6:	fa93 f3a3 	rbit	r3, r3
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	461a      	mov	r2, r3
 80023fe:	2300      	movs	r3, #0
 8002400:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002402:	4a18      	ldr	r2, [pc, #96]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002406:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d04b      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe f9e9 	bl	80007e8 <HAL_GetTick>
 8002416:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7fe f9e5 	bl	80007e8 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	; 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e0f5      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002430:	2302      	movs	r3, #2
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	fa93 f3a3 	rbit	r3, r3
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
 800243c:	2302      	movs	r3, #2
 800243e:	623b      	str	r3, [r7, #32]
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	61fb      	str	r3, [r7, #28]
  return result;
 8002448:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	b2db      	uxtb	r3, r3
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d108      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800245e:	4b01      	ldr	r3, [pc, #4]	; (8002464 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	e00d      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002464:	40021000 	.word	0x40021000
 8002468:	40007000 	.word	0x40007000
 800246c:	10908100 	.word	0x10908100
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	4b69      	ldr	r3, [pc, #420]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	2202      	movs	r2, #2
 8002482:	613a      	str	r2, [r7, #16]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	fa92 f2a2 	rbit	r2, r2
 800248a:	60fa      	str	r2, [r7, #12]
  return result;
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	fab2 f282 	clz	r2, r2
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	f002 021f 	and.w	r2, r2, #31
 800249e:	2101      	movs	r1, #1
 80024a0:	fa01 f202 	lsl.w	r2, r1, r2
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0b7      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024aa:	4b5e      	ldr	r3, [pc, #376]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	495b      	ldr	r1, [pc, #364]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d105      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c4:	4b57      	ldr	r3, [pc, #348]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	4a56      	ldr	r2, [pc, #344]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024dc:	4b51      	ldr	r3, [pc, #324]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	f023 0203 	bic.w	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	494e      	ldr	r1, [pc, #312]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d008      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024fa:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	4947      	ldr	r1, [pc, #284]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002508:	4313      	orrs	r3, r2
 800250a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002518:	4b42      	ldr	r3, [pc, #264]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	493f      	ldr	r1, [pc, #252]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002526:	4313      	orrs	r3, r2
 8002528:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002536:	4b3b      	ldr	r3, [pc, #236]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f023 0210 	bic.w	r2, r3, #16
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4938      	ldr	r1, [pc, #224]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002544:	4313      	orrs	r3, r2
 8002546:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002554:	4b33      	ldr	r3, [pc, #204]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	4930      	ldr	r1, [pc, #192]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f023 0220 	bic.w	r2, r3, #32
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4929      	ldr	r1, [pc, #164]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002580:	4313      	orrs	r3, r2
 8002582:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002590:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	4921      	ldr	r1, [pc, #132]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d008      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	491a      	ldr	r1, [pc, #104]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025cc:	4b15      	ldr	r3, [pc, #84]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	4912      	ldr	r1, [pc, #72]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	490b      	ldr	r1, [pc, #44]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	4903      	ldr	r1, [pc, #12]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002616:	4313      	orrs	r3, r2
 8002618:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3748      	adds	r7, #72	; 0x48
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000

08002628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e049      	b.n	80026ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fd ff7e 	bl	8000550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3304      	adds	r3, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f000 fe54 	bl	8003314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e049      	b.n	800277c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f841 	bl	8002784 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3304      	adds	r3, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4610      	mov	r0, r2
 8002716:	f000 fdfd 	bl	8003314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
 80027a4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_TIM_PWM_Start_DMA+0x2c>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	e03c      	b.n	800283e <HAL_TIM_PWM_Start_DMA+0xa6>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d109      	bne.n	80027de <HAL_TIM_PWM_Start_DMA+0x46>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	bf0c      	ite	eq
 80027d6:	2301      	moveq	r3, #1
 80027d8:	2300      	movne	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	e02f      	b.n	800283e <HAL_TIM_PWM_Start_DMA+0xa6>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d109      	bne.n	80027f8 <HAL_TIM_PWM_Start_DMA+0x60>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	bf0c      	ite	eq
 80027f0:	2301      	moveq	r3, #1
 80027f2:	2300      	movne	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e022      	b.n	800283e <HAL_TIM_PWM_Start_DMA+0xa6>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d109      	bne.n	8002812 <HAL_TIM_PWM_Start_DMA+0x7a>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e015      	b.n	800283e <HAL_TIM_PWM_Start_DMA+0xa6>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b10      	cmp	r3, #16
 8002816:	d109      	bne.n	800282c <HAL_TIM_PWM_Start_DMA+0x94>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e008      	b.n	800283e <HAL_TIM_PWM_Start_DMA+0xa6>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002842:	2302      	movs	r3, #2
 8002844:	e19c      	b.n	8002b80 <HAL_TIM_PWM_Start_DMA+0x3e8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d109      	bne.n	8002860 <HAL_TIM_PWM_Start_DMA+0xc8>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e03c      	b.n	80028da <HAL_TIM_PWM_Start_DMA+0x142>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d109      	bne.n	800287a <HAL_TIM_PWM_Start_DMA+0xe2>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b01      	cmp	r3, #1
 8002870:	bf0c      	ite	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	2300      	movne	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	e02f      	b.n	80028da <HAL_TIM_PWM_Start_DMA+0x142>
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b08      	cmp	r3, #8
 800287e:	d109      	bne.n	8002894 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	e022      	b.n	80028da <HAL_TIM_PWM_Start_DMA+0x142>
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b0c      	cmp	r3, #12
 8002898:	d109      	bne.n	80028ae <HAL_TIM_PWM_Start_DMA+0x116>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	bf0c      	ite	eq
 80028a6:	2301      	moveq	r3, #1
 80028a8:	2300      	movne	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	e015      	b.n	80028da <HAL_TIM_PWM_Start_DMA+0x142>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b10      	cmp	r3, #16
 80028b2:	d109      	bne.n	80028c8 <HAL_TIM_PWM_Start_DMA+0x130>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e008      	b.n	80028da <HAL_TIM_PWM_Start_DMA+0x142>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d034      	beq.n	8002948 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d104      	bne.n	80028ee <HAL_TIM_PWM_Start_DMA+0x156>
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e148      	b.n	8002b80 <HAL_TIM_PWM_Start_DMA+0x3e8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d104      	bne.n	80028fe <HAL_TIM_PWM_Start_DMA+0x166>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2202      	movs	r2, #2
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028fc:	e026      	b.n	800294c <HAL_TIM_PWM_Start_DMA+0x1b4>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d104      	bne.n	800290e <HAL_TIM_PWM_Start_DMA+0x176>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2202      	movs	r2, #2
 8002908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800290c:	e01e      	b.n	800294c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d104      	bne.n	800291e <HAL_TIM_PWM_Start_DMA+0x186>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800291c:	e016      	b.n	800294c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b0c      	cmp	r3, #12
 8002922:	d104      	bne.n	800292e <HAL_TIM_PWM_Start_DMA+0x196>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800292c:	e00e      	b.n	800294c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b10      	cmp	r3, #16
 8002932:	d104      	bne.n	800293e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800293c:	e006      	b.n	800294c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2202      	movs	r2, #2
 8002942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002946:	e001      	b.n	800294c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e119      	b.n	8002b80 <HAL_TIM_PWM_Start_DMA+0x3e8>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b0c      	cmp	r3, #12
 8002950:	f200 80ae 	bhi.w	8002ab0 <HAL_TIM_PWM_Start_DMA+0x318>
 8002954:	a201      	add	r2, pc, #4	; (adr r2, 800295c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295a:	bf00      	nop
 800295c:	08002991 	.word	0x08002991
 8002960:	08002ab1 	.word	0x08002ab1
 8002964:	08002ab1 	.word	0x08002ab1
 8002968:	08002ab1 	.word	0x08002ab1
 800296c:	080029d9 	.word	0x080029d9
 8002970:	08002ab1 	.word	0x08002ab1
 8002974:	08002ab1 	.word	0x08002ab1
 8002978:	08002ab1 	.word	0x08002ab1
 800297c:	08002a21 	.word	0x08002a21
 8002980:	08002ab1 	.word	0x08002ab1
 8002984:	08002ab1 	.word	0x08002ab1
 8002988:	08002ab1 	.word	0x08002ab1
 800298c:	08002a69 	.word	0x08002a69
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	4a7c      	ldr	r2, [pc, #496]	; (8002b88 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8002996:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	4a7b      	ldr	r2, [pc, #492]	; (8002b8c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	4a7a      	ldr	r2, [pc, #488]	; (8002b90 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3334      	adds	r3, #52	; 0x34
 80029b4:	461a      	mov	r2, r3
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	f7fe f87a 	bl	8000ab0 <HAL_DMA_Start_IT>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e0dc      	b.n	8002b80 <HAL_TIM_PWM_Start_DMA+0x3e8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d4:	60da      	str	r2, [r3, #12]
      break;
 80029d6:	e06e      	b.n	8002ab6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	4a6a      	ldr	r2, [pc, #424]	; (8002b88 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	4a69      	ldr	r2, [pc, #420]	; (8002b8c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	4a68      	ldr	r2, [pc, #416]	; (8002b90 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3338      	adds	r3, #56	; 0x38
 80029fc:	461a      	mov	r2, r3
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	f7fe f856 	bl	8000ab0 <HAL_DMA_Start_IT>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0b8      	b.n	8002b80 <HAL_TIM_PWM_Start_DMA+0x3e8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a1c:	60da      	str	r2, [r3, #12]
      break;
 8002a1e:	e04a      	b.n	8002ab6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2c:	4a57      	ldr	r2, [pc, #348]	; (8002b8c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8002a2e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	4a56      	ldr	r2, [pc, #344]	; (8002b90 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	333c      	adds	r3, #60	; 0x3c
 8002a44:	461a      	mov	r2, r3
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	f7fe f832 	bl	8000ab0 <HAL_DMA_Start_IT>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e094      	b.n	8002b80 <HAL_TIM_PWM_Start_DMA+0x3e8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a64:	60da      	str	r2, [r3, #12]
      break;
 8002a66:	e026      	b.n	8002ab6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	4a46      	ldr	r2, [pc, #280]	; (8002b88 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	4a45      	ldr	r2, [pc, #276]	; (8002b8c <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	4a44      	ldr	r2, [pc, #272]	; (8002b90 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3340      	adds	r3, #64	; 0x40
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	f7fe f80e 	bl	8000ab0 <HAL_DMA_Start_IT>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e070      	b.n	8002b80 <HAL_TIM_PWM_Start_DMA+0x3e8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002aac:	60da      	str	r2, [r3, #12]
      break;
 8002aae:	e002      	b.n	8002ab6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ab4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ab6:	7dfb      	ldrb	r3, [r7, #23]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d160      	bne.n	8002b7e <HAL_TIM_PWM_Start_DMA+0x3e6>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 ffe7 	bl	8003a98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a31      	ldr	r2, [pc, #196]	; (8002b94 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00e      	beq.n	8002af2 <HAL_TIM_PWM_Start_DMA+0x35a>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2f      	ldr	r2, [pc, #188]	; (8002b98 <HAL_TIM_PWM_Start_DMA+0x400>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d009      	beq.n	8002af2 <HAL_TIM_PWM_Start_DMA+0x35a>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a2e      	ldr	r2, [pc, #184]	; (8002b9c <HAL_TIM_PWM_Start_DMA+0x404>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d004      	beq.n	8002af2 <HAL_TIM_PWM_Start_DMA+0x35a>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2c      	ldr	r2, [pc, #176]	; (8002ba0 <HAL_TIM_PWM_Start_DMA+0x408>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_PWM_Start_DMA+0x35e>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_TIM_PWM_Start_DMA+0x360>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d007      	beq.n	8002b0c <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a20      	ldr	r2, [pc, #128]	; (8002b94 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_TIM_PWM_Start_DMA+0x3a6>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1e:	d00e      	beq.n	8002b3e <HAL_TIM_PWM_Start_DMA+0x3a6>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_TIM_PWM_Start_DMA+0x3a6>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_TIM_PWM_Start_DMA+0x3a6>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <HAL_TIM_PWM_Start_DMA+0x400>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d115      	bne.n	8002b6a <HAL_TIM_PWM_Start_DMA+0x3d2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_TIM_PWM_Start_DMA+0x414>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b06      	cmp	r3, #6
 8002b4e:	d015      	beq.n	8002b7c <HAL_TIM_PWM_Start_DMA+0x3e4>
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b56:	d011      	beq.n	8002b7c <HAL_TIM_PWM_Start_DMA+0x3e4>
      {
        __HAL_TIM_ENABLE(htim);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b68:	e008      	b.n	8002b7c <HAL_TIM_PWM_Start_DMA+0x3e4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e000      	b.n	8002b7e <HAL_TIM_PWM_Start_DMA+0x3e6>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	08003205 	.word	0x08003205
 8002b8c:	080032ad 	.word	0x080032ad
 8002b90:	08003173 	.word	0x08003173
 8002b94:	40012c00 	.word	0x40012c00
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	40014400 	.word	0x40014400
 8002ba0:	40014800 	.word	0x40014800
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800
 8002bac:	00010007 	.word	0x00010007

08002bb0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b0c      	cmp	r3, #12
 8002bc2:	d855      	bhi.n	8002c70 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002bc4:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002c01 	.word	0x08002c01
 8002bd0:	08002c71 	.word	0x08002c71
 8002bd4:	08002c71 	.word	0x08002c71
 8002bd8:	08002c71 	.word	0x08002c71
 8002bdc:	08002c1d 	.word	0x08002c1d
 8002be0:	08002c71 	.word	0x08002c71
 8002be4:	08002c71 	.word	0x08002c71
 8002be8:	08002c71 	.word	0x08002c71
 8002bec:	08002c39 	.word	0x08002c39
 8002bf0:	08002c71 	.word	0x08002c71
 8002bf4:	08002c71 	.word	0x08002c71
 8002bf8:	08002c71 	.word	0x08002c71
 8002bfc:	08002c55 	.word	0x08002c55
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd ffaa 	bl	8000b6e <HAL_DMA_Abort_IT>
      break;
 8002c1a:	e02c      	b.n	8002c76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd ff9c 	bl	8000b6e <HAL_DMA_Abort_IT>
      break;
 8002c36:	e01e      	b.n	8002c76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd ff8e 	bl	8000b6e <HAL_DMA_Abort_IT>
      break;
 8002c52:	e010      	b.n	8002c76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd ff80 	bl	8000b6e <HAL_DMA_Abort_IT>
      break;
 8002c6e:	e002      	b.n	8002c76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	73fb      	strb	r3, [r7, #15]
      break;
 8002c74:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d17b      	bne.n	8002d74 <HAL_TIM_PWM_Stop_DMA+0x1c4>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2200      	movs	r2, #0
 8002c82:	6839      	ldr	r1, [r7, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 ff07 	bl	8003a98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a3c      	ldr	r2, [pc, #240]	; (8002d80 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00e      	beq.n	8002cb2 <HAL_TIM_PWM_Stop_DMA+0x102>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a3a      	ldr	r2, [pc, #232]	; (8002d84 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d009      	beq.n	8002cb2 <HAL_TIM_PWM_Stop_DMA+0x102>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a39      	ldr	r2, [pc, #228]	; (8002d88 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d004      	beq.n	8002cb2 <HAL_TIM_PWM_Stop_DMA+0x102>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a37      	ldr	r2, [pc, #220]	; (8002d8c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d101      	bne.n	8002cb6 <HAL_TIM_PWM_Stop_DMA+0x106>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_TIM_PWM_Stop_DMA+0x108>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d017      	beq.n	8002cec <HAL_TIM_PWM_Stop_DMA+0x13c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a1a      	ldr	r2, [r3, #32]
 8002cc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10f      	bne.n	8002cec <HAL_TIM_PWM_Stop_DMA+0x13c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	f240 4344 	movw	r3, #1092	; 0x444
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d107      	bne.n	8002cec <HAL_TIM_PWM_Stop_DMA+0x13c>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6a1a      	ldr	r2, [r3, #32]
 8002cf2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10f      	bne.n	8002d1c <HAL_TIM_PWM_Stop_DMA+0x16c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6a1a      	ldr	r2, [r3, #32]
 8002d02:	f240 4344 	movw	r3, #1092	; 0x444
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d107      	bne.n	8002d1c <HAL_TIM_PWM_Stop_DMA+0x16c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d104      	bne.n	8002d2c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d2a:	e023      	b.n	8002d74 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d104      	bne.n	8002d3c <HAL_TIM_PWM_Stop_DMA+0x18c>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d3a:	e01b      	b.n	8002d74 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d104      	bne.n	8002d4c <HAL_TIM_PWM_Stop_DMA+0x19c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d4a:	e013      	b.n	8002d74 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d104      	bne.n	8002d5c <HAL_TIM_PWM_Stop_DMA+0x1ac>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d5a:	e00b      	b.n	8002d74 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	2b10      	cmp	r3, #16
 8002d60:	d104      	bne.n	8002d6c <HAL_TIM_PWM_Stop_DMA+0x1bc>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d6a:	e003      	b.n	8002d74 <HAL_TIM_PWM_Stop_DMA+0x1c4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40012c00 	.word	0x40012c00
 8002d84:	40014000 	.word	0x40014000
 8002d88:	40014400 	.word	0x40014400
 8002d8c:	40014800 	.word	0x40014800

08002d90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e0ff      	b.n	8002fae <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b14      	cmp	r3, #20
 8002dba:	f200 80f0 	bhi.w	8002f9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002dbe:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc4:	08002e19 	.word	0x08002e19
 8002dc8:	08002f9f 	.word	0x08002f9f
 8002dcc:	08002f9f 	.word	0x08002f9f
 8002dd0:	08002f9f 	.word	0x08002f9f
 8002dd4:	08002e59 	.word	0x08002e59
 8002dd8:	08002f9f 	.word	0x08002f9f
 8002ddc:	08002f9f 	.word	0x08002f9f
 8002de0:	08002f9f 	.word	0x08002f9f
 8002de4:	08002e9b 	.word	0x08002e9b
 8002de8:	08002f9f 	.word	0x08002f9f
 8002dec:	08002f9f 	.word	0x08002f9f
 8002df0:	08002f9f 	.word	0x08002f9f
 8002df4:	08002edb 	.word	0x08002edb
 8002df8:	08002f9f 	.word	0x08002f9f
 8002dfc:	08002f9f 	.word	0x08002f9f
 8002e00:	08002f9f 	.word	0x08002f9f
 8002e04:	08002f1d 	.word	0x08002f1d
 8002e08:	08002f9f 	.word	0x08002f9f
 8002e0c:	08002f9f 	.word	0x08002f9f
 8002e10:	08002f9f 	.word	0x08002f9f
 8002e14:	08002f5d 	.word	0x08002f5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fafa 	bl	8003418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699a      	ldr	r2, [r3, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0208 	orr.w	r2, r2, #8
 8002e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0204 	bic.w	r2, r2, #4
 8002e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6999      	ldr	r1, [r3, #24]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	619a      	str	r2, [r3, #24]
      break;
 8002e56:	e0a5      	b.n	8002fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fb60 	bl	8003524 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6999      	ldr	r1, [r3, #24]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	021a      	lsls	r2, r3, #8
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	619a      	str	r2, [r3, #24]
      break;
 8002e98:	e084      	b.n	8002fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68b9      	ldr	r1, [r7, #8]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 fbbf 	bl	8003624 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69da      	ldr	r2, [r3, #28]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0208 	orr.w	r2, r2, #8
 8002eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0204 	bic.w	r2, r2, #4
 8002ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69d9      	ldr	r1, [r3, #28]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	61da      	str	r2, [r3, #28]
      break;
 8002ed8:	e064      	b.n	8002fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fc1d 	bl	8003720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69da      	ldr	r2, [r3, #28]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	69d9      	ldr	r1, [r3, #28]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	61da      	str	r2, [r3, #28]
      break;
 8002f1a:	e043      	b.n	8002fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fc60 	bl	80037e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0208 	orr.w	r2, r2, #8
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0204 	bic.w	r2, r2, #4
 8002f46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f5a:	e023      	b.n	8002fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fc9e 	bl	80038a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	021a      	lsls	r2, r3, #8
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f9c:	e002      	b.n	8002fa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop

08002fb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_TIM_ConfigClockSource+0x1c>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e0b6      	b.n	8003142 <HAL_TIM_ConfigClockSource+0x18a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003010:	d03e      	beq.n	8003090 <HAL_TIM_ConfigClockSource+0xd8>
 8003012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003016:	f200 8087 	bhi.w	8003128 <HAL_TIM_ConfigClockSource+0x170>
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301e:	f000 8086 	beq.w	800312e <HAL_TIM_ConfigClockSource+0x176>
 8003022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003026:	d87f      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x170>
 8003028:	2b70      	cmp	r3, #112	; 0x70
 800302a:	d01a      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0xaa>
 800302c:	2b70      	cmp	r3, #112	; 0x70
 800302e:	d87b      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x170>
 8003030:	2b60      	cmp	r3, #96	; 0x60
 8003032:	d050      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x11e>
 8003034:	2b60      	cmp	r3, #96	; 0x60
 8003036:	d877      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x170>
 8003038:	2b50      	cmp	r3, #80	; 0x50
 800303a:	d03c      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0xfe>
 800303c:	2b50      	cmp	r3, #80	; 0x50
 800303e:	d873      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x170>
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d058      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x13e>
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d86f      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x170>
 8003048:	2b30      	cmp	r3, #48	; 0x30
 800304a:	d064      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x15e>
 800304c:	2b30      	cmp	r3, #48	; 0x30
 800304e:	d86b      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x170>
 8003050:	2b20      	cmp	r3, #32
 8003052:	d060      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x15e>
 8003054:	2b20      	cmp	r3, #32
 8003056:	d867      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x170>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05c      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x15e>
 800305c:	2b10      	cmp	r3, #16
 800305e:	d05a      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x15e>
 8003060:	e062      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6899      	ldr	r1, [r3, #8]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f000 fcf1 	bl	8003a58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	609a      	str	r2, [r3, #8]
      break;
 800308e:	e04f      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	6899      	ldr	r1, [r3, #8]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	f000 fcda 	bl	8003a58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030b2:	609a      	str	r2, [r3, #8]
      break;
 80030b4:	e03c      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 fc4e 	bl	8003964 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2150      	movs	r1, #80	; 0x50
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fca7 	bl	8003a22 <TIM_ITRx_SetConfig>
      break;
 80030d4:	e02c      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f000 fc6d 	bl	80039c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2160      	movs	r1, #96	; 0x60
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fc97 	bl	8003a22 <TIM_ITRx_SetConfig>
      break;
 80030f4:	e01c      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	461a      	mov	r2, r3
 8003104:	f000 fc2e 	bl	8003964 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2140      	movs	r1, #64	; 0x40
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fc87 	bl	8003a22 <TIM_ITRx_SetConfig>
      break;
 8003114:	e00c      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f000 fc7e 	bl	8003a22 <TIM_ITRx_SetConfig>
      break;
 8003126:	e003      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e000      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800312e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	429a      	cmp	r2, r3
 8003188:	d107      	bne.n	800319a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003198:	e02a      	b.n	80031f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d107      	bne.n	80031b4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2202      	movs	r2, #2
 80031a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b2:	e01d      	b.n	80031f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d107      	bne.n	80031ce <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2204      	movs	r2, #4
 80031c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031cc:	e010      	b.n	80031f0 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d107      	bne.n	80031e8 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2208      	movs	r2, #8
 80031dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031e6:	e003      	b.n	80031f0 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff ffb4 	bl	800315e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
}
 80031fc:	bf00      	nop
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d10b      	bne.n	8003234 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2201      	movs	r2, #1
 8003220:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d136      	bne.n	8003298 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003232:	e031      	b.n	8003298 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	d10b      	bne.n	8003256 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2202      	movs	r2, #2
 8003242:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d125      	bne.n	8003298 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003254:	e020      	b.n	8003298 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d10b      	bne.n	8003278 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2204      	movs	r2, #4
 8003264:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d114      	bne.n	8003298 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003276:	e00f      	b.n	8003298 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	429a      	cmp	r2, r3
 8003280:	d10a      	bne.n	8003298 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2208      	movs	r2, #8
 8003286:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d103      	bne.n	8003298 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7fc ff95 	bl	80001c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	771a      	strb	r2, [r3, #28]
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d103      	bne.n	80032cc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	771a      	strb	r2, [r3, #28]
 80032ca:	e019      	b.n	8003300 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d103      	bne.n	80032de <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2202      	movs	r2, #2
 80032da:	771a      	strb	r2, [r3, #28]
 80032dc:	e010      	b.n	8003300 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d103      	bne.n	80032f0 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2204      	movs	r2, #4
 80032ec:	771a      	strb	r2, [r3, #28]
 80032ee:	e007      	b.n	8003300 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d102      	bne.n	8003300 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2208      	movs	r2, #8
 80032fe:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f7ff ff22 	bl	800314a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	771a      	strb	r2, [r3, #28]
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a36      	ldr	r2, [pc, #216]	; (8003400 <TIM_Base_SetConfig+0xec>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00b      	beq.n	8003344 <TIM_Base_SetConfig+0x30>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003332:	d007      	beq.n	8003344 <TIM_Base_SetConfig+0x30>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a33      	ldr	r2, [pc, #204]	; (8003404 <TIM_Base_SetConfig+0xf0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_Base_SetConfig+0x30>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a32      	ldr	r2, [pc, #200]	; (8003408 <TIM_Base_SetConfig+0xf4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d108      	bne.n	8003356 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a29      	ldr	r2, [pc, #164]	; (8003400 <TIM_Base_SetConfig+0xec>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d017      	beq.n	800338e <TIM_Base_SetConfig+0x7a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003364:	d013      	beq.n	800338e <TIM_Base_SetConfig+0x7a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a26      	ldr	r2, [pc, #152]	; (8003404 <TIM_Base_SetConfig+0xf0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00f      	beq.n	800338e <TIM_Base_SetConfig+0x7a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a25      	ldr	r2, [pc, #148]	; (8003408 <TIM_Base_SetConfig+0xf4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00b      	beq.n	800338e <TIM_Base_SetConfig+0x7a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a24      	ldr	r2, [pc, #144]	; (800340c <TIM_Base_SetConfig+0xf8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d007      	beq.n	800338e <TIM_Base_SetConfig+0x7a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a23      	ldr	r2, [pc, #140]	; (8003410 <TIM_Base_SetConfig+0xfc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <TIM_Base_SetConfig+0x7a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a22      	ldr	r2, [pc, #136]	; (8003414 <TIM_Base_SetConfig+0x100>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d108      	bne.n	80033a0 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a0e      	ldr	r2, [pc, #56]	; (8003400 <TIM_Base_SetConfig+0xec>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00b      	beq.n	80033e4 <TIM_Base_SetConfig+0xd0>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a0f      	ldr	r2, [pc, #60]	; (800340c <TIM_Base_SetConfig+0xf8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d007      	beq.n	80033e4 <TIM_Base_SetConfig+0xd0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a0e      	ldr	r2, [pc, #56]	; (8003410 <TIM_Base_SetConfig+0xfc>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d003      	beq.n	80033e4 <TIM_Base_SetConfig+0xd0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <TIM_Base_SetConfig+0x100>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d103      	bne.n	80033ec <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	615a      	str	r2, [r3, #20]
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40012c00 	.word	0x40012c00
 8003404:	40000400 	.word	0x40000400
 8003408:	40000800 	.word	0x40000800
 800340c:	40014000 	.word	0x40014000
 8003410:	40014400 	.word	0x40014400
 8003414:	40014800 	.word	0x40014800

08003418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f023 0201 	bic.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0303 	bic.w	r3, r3, #3
 8003452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f023 0302 	bic.w	r3, r3, #2
 8003464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a28      	ldr	r2, [pc, #160]	; (8003514 <TIM_OC1_SetConfig+0xfc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00b      	beq.n	8003490 <TIM_OC1_SetConfig+0x78>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a27      	ldr	r2, [pc, #156]	; (8003518 <TIM_OC1_SetConfig+0x100>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d007      	beq.n	8003490 <TIM_OC1_SetConfig+0x78>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a26      	ldr	r2, [pc, #152]	; (800351c <TIM_OC1_SetConfig+0x104>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d003      	beq.n	8003490 <TIM_OC1_SetConfig+0x78>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a25      	ldr	r2, [pc, #148]	; (8003520 <TIM_OC1_SetConfig+0x108>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d10c      	bne.n	80034aa <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f023 0308 	bic.w	r3, r3, #8
 8003496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f023 0304 	bic.w	r3, r3, #4
 80034a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a19      	ldr	r2, [pc, #100]	; (8003514 <TIM_OC1_SetConfig+0xfc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00b      	beq.n	80034ca <TIM_OC1_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a18      	ldr	r2, [pc, #96]	; (8003518 <TIM_OC1_SetConfig+0x100>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <TIM_OC1_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a17      	ldr	r2, [pc, #92]	; (800351c <TIM_OC1_SetConfig+0x104>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_OC1_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a16      	ldr	r2, [pc, #88]	; (8003520 <TIM_OC1_SetConfig+0x108>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d111      	bne.n	80034ee <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	621a      	str	r2, [r3, #32]
}
 8003508:	bf00      	nop
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	40012c00 	.word	0x40012c00
 8003518:	40014000 	.word	0x40014000
 800351c:	40014400 	.word	0x40014400
 8003520:	40014800 	.word	0x40014800

08003524 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	f023 0210 	bic.w	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f023 0320 	bic.w	r3, r3, #32
 8003572:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a24      	ldr	r2, [pc, #144]	; (8003614 <TIM_OC2_SetConfig+0xf0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d10d      	bne.n	80035a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800358e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a1b      	ldr	r2, [pc, #108]	; (8003614 <TIM_OC2_SetConfig+0xf0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00b      	beq.n	80035c4 <TIM_OC2_SetConfig+0xa0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a1a      	ldr	r2, [pc, #104]	; (8003618 <TIM_OC2_SetConfig+0xf4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d007      	beq.n	80035c4 <TIM_OC2_SetConfig+0xa0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a19      	ldr	r2, [pc, #100]	; (800361c <TIM_OC2_SetConfig+0xf8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_OC2_SetConfig+0xa0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a18      	ldr	r2, [pc, #96]	; (8003620 <TIM_OC2_SetConfig+0xfc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d113      	bne.n	80035ec <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ca:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035d2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	621a      	str	r2, [r3, #32]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40012c00 	.word	0x40012c00
 8003618:	40014000 	.word	0x40014000
 800361c:	40014400 	.word	0x40014400
 8003620:	40014800 	.word	0x40014800

08003624 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a23      	ldr	r2, [pc, #140]	; (8003710 <TIM_OC3_SetConfig+0xec>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d10d      	bne.n	80036a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800368c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036a0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <TIM_OC3_SetConfig+0xec>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00b      	beq.n	80036c2 <TIM_OC3_SetConfig+0x9e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a19      	ldr	r2, [pc, #100]	; (8003714 <TIM_OC3_SetConfig+0xf0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d007      	beq.n	80036c2 <TIM_OC3_SetConfig+0x9e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a18      	ldr	r2, [pc, #96]	; (8003718 <TIM_OC3_SetConfig+0xf4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d003      	beq.n	80036c2 <TIM_OC3_SetConfig+0x9e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a17      	ldr	r2, [pc, #92]	; (800371c <TIM_OC3_SetConfig+0xf8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d113      	bne.n	80036ea <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	621a      	str	r2, [r3, #32]
}
 8003704:	bf00      	nop
 8003706:	371c      	adds	r7, #28
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800

08003720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800376e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	031b      	lsls	r3, r3, #12
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a16      	ldr	r2, [pc, #88]	; (80037d8 <TIM_OC4_SetConfig+0xb8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00b      	beq.n	800379c <TIM_OC4_SetConfig+0x7c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a15      	ldr	r2, [pc, #84]	; (80037dc <TIM_OC4_SetConfig+0xbc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d007      	beq.n	800379c <TIM_OC4_SetConfig+0x7c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <TIM_OC4_SetConfig+0xc0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d003      	beq.n	800379c <TIM_OC4_SetConfig+0x7c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a13      	ldr	r2, [pc, #76]	; (80037e4 <TIM_OC4_SetConfig+0xc4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d109      	bne.n	80037b0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	019b      	lsls	r3, r3, #6
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800

080037e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800382c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a15      	ldr	r2, [pc, #84]	; (8003894 <TIM_OC5_SetConfig+0xac>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00b      	beq.n	800385a <TIM_OC5_SetConfig+0x72>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <TIM_OC5_SetConfig+0xb0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <TIM_OC5_SetConfig+0x72>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a13      	ldr	r2, [pc, #76]	; (800389c <TIM_OC5_SetConfig+0xb4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d003      	beq.n	800385a <TIM_OC5_SetConfig+0x72>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <TIM_OC5_SetConfig+0xb8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d109      	bne.n	800386e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003860:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	697a      	ldr	r2, [r7, #20]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	621a      	str	r2, [r3, #32]
}
 8003888:	bf00      	nop
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	40012c00 	.word	0x40012c00
 8003898:	40014000 	.word	0x40014000
 800389c:	40014400 	.word	0x40014400
 80038a0:	40014800 	.word	0x40014800

080038a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	051b      	lsls	r3, r3, #20
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a16      	ldr	r2, [pc, #88]	; (8003954 <TIM_OC6_SetConfig+0xb0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00b      	beq.n	8003918 <TIM_OC6_SetConfig+0x74>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a15      	ldr	r2, [pc, #84]	; (8003958 <TIM_OC6_SetConfig+0xb4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d007      	beq.n	8003918 <TIM_OC6_SetConfig+0x74>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a14      	ldr	r2, [pc, #80]	; (800395c <TIM_OC6_SetConfig+0xb8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <TIM_OC6_SetConfig+0x74>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a13      	ldr	r2, [pc, #76]	; (8003960 <TIM_OC6_SetConfig+0xbc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d109      	bne.n	800392c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800391e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	029b      	lsls	r3, r3, #10
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40012c00 	.word	0x40012c00
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400
 8003960:	40014800 	.word	0x40014800

08003964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	f023 0201 	bic.w	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800398e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f023 030a 	bic.w	r3, r3, #10
 80039a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	621a      	str	r2, [r3, #32]
}
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b087      	sub	sp, #28
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f023 0210 	bic.w	r2, r3, #16
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	031b      	lsls	r3, r3, #12
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f043 0307 	orr.w	r3, r3, #7
 8003a44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	609a      	str	r2, [r3, #8]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	021a      	lsls	r2, r3, #8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 031f 	and.w	r3, r3, #31
 8003aaa:	2201      	movs	r2, #1
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a1a      	ldr	r2, [r3, #32]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	401a      	ands	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a1a      	ldr	r2, [r3, #32]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e059      	b.n	8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d108      	bne.n	8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a19      	ldr	r2, [pc, #100]	; (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d013      	beq.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b64:	d00e      	beq.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a13      	ldr	r2, [pc, #76]	; (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d10c      	bne.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40000400 	.word	0x40000400
 8003bc4:	40000800 	.word	0x40000800
 8003bc8:	40014000 	.word	0x40014000

08003bcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e060      	b.n	8003caa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	041b      	lsls	r3, r3, #16
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d115      	bne.n	8003c98 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	051b      	lsls	r3, r3, #20
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40012c00 	.word	0x40012c00

08003cbc <__libc_init_array>:
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	4d0d      	ldr	r5, [pc, #52]	; (8003cf4 <__libc_init_array+0x38>)
 8003cc0:	4c0d      	ldr	r4, [pc, #52]	; (8003cf8 <__libc_init_array+0x3c>)
 8003cc2:	1b64      	subs	r4, r4, r5
 8003cc4:	10a4      	asrs	r4, r4, #2
 8003cc6:	2600      	movs	r6, #0
 8003cc8:	42a6      	cmp	r6, r4
 8003cca:	d109      	bne.n	8003ce0 <__libc_init_array+0x24>
 8003ccc:	4d0b      	ldr	r5, [pc, #44]	; (8003cfc <__libc_init_array+0x40>)
 8003cce:	4c0c      	ldr	r4, [pc, #48]	; (8003d00 <__libc_init_array+0x44>)
 8003cd0:	f000 f820 	bl	8003d14 <_init>
 8003cd4:	1b64      	subs	r4, r4, r5
 8003cd6:	10a4      	asrs	r4, r4, #2
 8003cd8:	2600      	movs	r6, #0
 8003cda:	42a6      	cmp	r6, r4
 8003cdc:	d105      	bne.n	8003cea <__libc_init_array+0x2e>
 8003cde:	bd70      	pop	{r4, r5, r6, pc}
 8003ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce4:	4798      	blx	r3
 8003ce6:	3601      	adds	r6, #1
 8003ce8:	e7ee      	b.n	8003cc8 <__libc_init_array+0xc>
 8003cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cee:	4798      	blx	r3
 8003cf0:	3601      	adds	r6, #1
 8003cf2:	e7f2      	b.n	8003cda <__libc_init_array+0x1e>
 8003cf4:	08003d5c 	.word	0x08003d5c
 8003cf8:	08003d5c 	.word	0x08003d5c
 8003cfc:	08003d5c 	.word	0x08003d5c
 8003d00:	08003d60 	.word	0x08003d60

08003d04 <memset>:
 8003d04:	4402      	add	r2, r0
 8003d06:	4603      	mov	r3, r0
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <memset+0xa>
 8003d0c:	4770      	bx	lr
 8003d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d12:	e7f9      	b.n	8003d08 <memset+0x4>

08003d14 <_init>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr

08003d20 <_fini>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr
